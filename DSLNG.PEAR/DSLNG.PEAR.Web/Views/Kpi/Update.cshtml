@model DSLNG.PEAR.Web.ViewModels.Kpi.UpdateKpiViewModel
@{
    ViewBag.Title = "Edit KPI";
    int i = 0;
}

<h2>@ViewBag.Title</h2>
@Html.Partial("_MessageResponse")
<div class="row">
    <div class="col-md-4">
        <form action="@Url.Action("Update")" method="POST">
            @Html.HiddenFor(model => model.Id)
            <div class="form-group">
                @Html.LabelFor(model => model.Name, new { @class = "control-label" })
                @Html.TextBoxFor(model => model.Name, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Name)
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.LevelId, new { @class = "control-label" })
                @Html.DropDownListFor(model => model.LevelId, Model.LevelList, "", new { @class = "form-control", @onChange = "levelOnChange(this)" })
                @Html.ValidationMessageFor(model => model.LevelId)
            </div>
            <div class="form-group pillar" style="display:none">
                @Html.LabelFor(model => model.PillarId, new { @class = "control-label" })
                @Html.DropDownListFor(model => model.PillarId, Model.PillarList, "", new { @class = "form-control", @onChange = "pillarOnChange(this)" })
                @Html.ValidationMessageFor(model => model.PillarId)
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.RoleGroupId, new { @class = "control-label" })
                @Html.DropDownListFor(model => model.RoleGroupId, Model.RoleGroupList, "", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.RoleGroupId)
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.TypeId, new { @class = "control-label" })
                @Html.DropDownListFor(model => model.TypeId, Model.TypeList, "", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.TypeId)
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.GroupId, new { @class = "control-label" })
                @Html.DropDownListFor(model => model.GroupId, Model.GroupList, "", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.GroupId)
            </div>
            @Html.LabelFor(model => model.Code, new { @class = "control-label" })
            <div class="form-group">
                <div class="col-lg-4">
                    <input type="text" name="CodeFromPillar" readonly="readonly" class="form-control" />
                </div>
                <div class="col-lg-4">
                    <input type="text" name="CodeFromLevel" readonly="readonly" class="form-control" />
                </div>
                <div class="col-lg-4">
                    @Html.TextBoxFor(model => model.Code, new { @class = "form-control" })
                </div>
                @Html.ValidationMessageFor(model => model.Code)
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.YtdFormulaValue, new { @class = "control-label" })
                @Html.DropDownListFor(model => model.YtdFormulaValue, Model.YtdFormulaList, "", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.YtdFormulaValue)
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.IsEconomic, new { @class = "control-label" })
                @Html.EditorFor(model => model.IsEconomic, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.IsEconomic)
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.MeasurementId, new { @class = "control-label" })
                @Html.DropDownListFor(model => model.MeasurementId, Model.MeasurementList, "", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.MeasurementId)
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.MethodId, new { @class = "control-label" })
                @Html.DropDownListFor(model => model.MethodId, Model.MethodList, "", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.MethodId)
            </div>
            <div class="form-group form-list">
                <label>Relation Model</label>
                <button type="button" class="btn btn-default form-inline add-relation-model"><i class="glyphicon glyphicon-plus"></i></button>
            </div>
            <div class="relation-model-wrapper">
                @foreach (var rm in Model.RelationModels)
                {
                    <div class="form-group relation-model-list">
                        <input type="hidden" name="RelationModels.Index" value="@i" />
                        <div class="col-lg-5">
                            <select name="RelationModels[@i].KpiId" class="form-control rm-kpi">
                                <option value="0">-</option>
                                @foreach (var item in Model.KpiList)
                                {
                                    var selected = item.Value == rm.KpiId.ToString() ? "selected = 'selected'" : "";
                                    <option value="@item.Value" @selected>@item.Text</option>
                                }
                            </select>
                        </div>
                        <div class="col-lg-5">
                            <select name="RelationModels[@i].Method" class="form-control rm-method">
                                <option value="0">-</option>
                                @foreach (var method in rm.Methods)
                                {
                                    var selected = method.Value == rm.Method.ToString() ? "selected = 'selected'" : "";
                                    <option value="@method.Value" @selected>@method.Text</option>
                                }
                            </select>
                        </div>
                        <div class="col-lg-2">
                            <button type="button" class="btn btn-default form-control remove-relation-model" style="display: inline-block;"><i class="glyphicon glyphicon-minus"></i></button>

                        </div>
                    </div>
                                i++;
                }
            </div>
            <span id="counter" data-relation-model="@i"></span>
            <div class="form-group">
                @Html.LabelFor(model => model.Order, new { @class = "control-label" })
                @Html.TextBoxFor(model => model.Order, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Order)
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.PeriodeValue, new { @class = "control-label" })
                @Html.DropDownListFor(model => model.PeriodeValue, Model.PeriodeList, "", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.PeriodeValue)
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Remark, new { @class = "control-label" })
                @Html.TextBoxFor(model => model.Remark, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Remark)
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.IsActive, new { @class = "control-label" })
                @Html.EditorFor(model => model.IsActive, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.IsActive)
            </div>

            <button type="submit" class="btn btn-default">Submit</button>
            <a href="@Url.Action("Index")" class="btn btn-default">Cancel</a>

        </form>
    </div>
</div>

<script>
    $(document).ready(function () {
        var i = $('#counter').attr('data-relation-model');
        i = parseInt(i) === NaN ? 0 : parseInt(i);

        $('.add-relation-model').click(function () {
            var clone = $('.relation-model-list:last').clone(true);
            clone.find('input[name="RelationModels.Index"]').val(i);
            clone.find('.rm-kpi').attr('name', 'RelationModels[' + i + '].KpiId');
            clone.find('.rm-method').attr('name', 'RelationModels[' + i + '].Method');
            clone.appendTo('.relation-model-wrapper').show();
            if (i > 0) {
                $('.remove-relation-model').show();
            }
            i++;
        });

        if (i <= 1) {
            $('.remove-relation-model').hide();
        }

        $('.remove-relation-model').click(function () {
            i--;
            $(this).parent().parent().remove();
            if (i == 1) {
                $('.remove-relation-model').hide();
            }
        });
    })

    function levelOnChange(val) {
        var levelId = $(val).val();
        $.ajax({
            url: '@Url.Action("GetLevelCode")',
            data: { id: levelId },
            type: 'GET',
            success: function (data) {
                $("input[name=CodeFromLevel]").val(data);
            }
        });
        var selectedText = $(val).find("option:selected").text();
        if (selectedText == "Corporate") {
            $(".pillar").show();
        }
        else {
            $(".pillar").hide();
        }
    }

    function pillarOnChange(val) {
        var pillarId = $(val).val();
        $.ajax({
            url: '@Url.Action("GetPillarCode")',
            data: { id: pillarId },
            type: 'GET',
            success: function (data) {
                $("input[name=CodeFromPillar]").val(data);
            }
        });
    }
</script>
