
@using System.Linq;
@model DSLNG.PEAR.Web.ViewModels.CorporatePortofolio.CreatePmsConfigViewModel
<button type="button" class="close" data-dismiss="modal" aria-label="Close">
    <span
        aria-hidden="true">&times;</span></button>
<div class="whitebox">
    <h4>Create Pms Config</h4>
    <form class="form-group" action="@Url.Action("CreatePmsConfig")" method="POST">
        @Html.HiddenFor(x => x.PmsSummaryId)
        <div class="form-group form-list">
            <label>Pillar</label>
            @Html.DropDownListFor(x => x.PillarId, Model.Pillars, "Select Pillar",  new { @class = "form-control ddl-pillar" })
            @Html.ValidationMessageFor(x => x.PillarId)
        </div>

        <div class="form-group form-list">
            <label>Scoring Type</label>
            @Html.DropDownListFor(x => x.ScoringType, Model.ScoringTypes, new { @class = "form-control" })
            @Html.ValidationMessageFor(x => x.ScoringType)
        </div>

        <div class="form-group form-list">
            <label>Weight</label>
            @Html.TextBoxFor(x => x.Weight, new { @class = "form-control" })
            @Html.ValidationMessageFor(x => x.Weight)
        </div>

        @{
            int i = 0;
        }

        <div class="form-group form-list">
            <label>Scoring Indicator</label> <button type="button" class="btn btn-default form-inline add-score-indicator"><i class="glyphicon glyphicon-plus"></i></button>
        </div>
        <div class="score-indicator-wrapper">
            @foreach (var item in Model.ScoreIndicators)
            {
                //item.Expression.Split('x')[1];
                <div class="row" style="margin-bottom: 10px;">
                    <div class="col-sm-12 form-inline">
                        @*<select class="mathType form-control">
                        <option value="1">Single</option>
                        <option value="2">Between</option>
                    </select>
                    <span class="single-x">X</span>
                    <select class="operatorType form-control">
                        <option value="<"><</option>
                        <option value="<="><=</option>
                        <option value="<=">>=</option>
                    </select>
                    <input type="text" value="" class="form-control" style="width: 55px;"/>*@
                        <input type="text" name="ScoreIndicators.Index" value="@i" />
                        @Html.TextBoxFor(x => Model.ScoreIndicators[i].Expression, new { @class = "form-control", placeholder = "Expression" })
                        @Html.TextBoxFor(x => Model.ScoreIndicators[i].Color, new { @class = "form-control", placeholder = "Color" })
                        <button type="button" class="btn btn-default form-control remove-score-indicator" style="display: inline-block;"><i class="glyphicon glyphicon-minus"></i></button>
                    </div>
                </div>
                <div class="clearfix"></div>
                i++;
            }
        </div>
        <div class="form-group form-list">
            <button type="submit" class="btn btn-default btn-darkblue">Submit</button>
            <button type="button" class="btn btn-default btn-darkblue" data-dismiss="modal" aria-label="Close">Cancel</button>
        </div>

    </form>
</div>
<span id="counter" data-score-indicator="@i"></span>

<div class="row hidden-scoring-indicator" style="margin-bottom: 10px; display: none">
    <div class="col-sm-12 form-inline">
        <input type="text" name="ScoreIndicators.Index" value="1" />
        <input class="form-control si-expression" name="Expression" placeholder="Expression, e.g : x > 20" type="text" value="">
        <input class="form-control si-color" name="Color" placeholder="Color" type="text" value="">
        
        <button type="button" class="btn btn-default form-control remove-score-indicator" style="display: inline-block;"><i class="glyphicon glyphicon-minus"></i></button>
    </div>
</div>



<script type="text/javascript">
    $(document).ready(function () {
        $("form").removeData("validator");
        $("form").removeData("unobtrusiveValidation");
        $.validator.unobtrusive.parse("form");
        
        var i = $('#counter').attr('data-score-indicator');
        i = parseInt(i) === NaN ? 0 : parseInt(i);
        $('.add-score-indicator').click(function () {
            var clone = $('.hidden-scoring-indicator').clone(true);
            clone.find('input[name="ScoreIndicators.Index"]').val(i);
            clone.find('.si-expression').attr('name', 'ScoreIndicators['+ i +'].Expression');
            clone.find('.si-color').attr('name', 'ScoreIndicators[' + i + '].Color');
            clone.appendTo('.score-indicator-wrapper').removeClass('hidden-scoring-indicator').show();
            if (i > 0) {
                $('.remove-score-indicator').show();
            }
            i++;
        });

        $('.remove-score-indicator').click(function () {
            i--;
            $(this).parent().parent().remove();
            if (i == 1) {
                $('.remove-score-indicator').hide();
            }
        });

        $('.ddl-pillar').change(function () {
            var pillarId = $(this).val();
            var ddlKpi = $('.ddl-kpi');
            $.ajax({
                url: '@Url.Action("GetKpis")',
                data: { id: pillarId },
                type: 'GET',
                success: function (data) {
                    ddlKpi.html('');
                    $.each(data, function (id, option) {
                        ddlKpi.append($('<option></option>').val(option.id).html(option.name));
                    });
                }
            });

        });
    })
</script>

