@using DevExpress.Data
@using DevExpress.XtraGrid
@model IEnumerable<DSLNG.PEAR.Web.ViewModels.PmsSummary.PmsSummaryViewModel>


    @Html.DevExpress().GridView(settings =>
        {
            settings.Name = "gridPmsSummaryIndex";
            settings.KeyFieldName = "Id";
            settings.CallbackRouteValues = new { Controller = "PmsSummary", Action = "IndexGridPartial" };
            settings.SettingsBehavior.AllowFixedGroups = true;
            settings.Settings.ShowFooter = true;
            settings.Width = Unit.Percentage(100);

            var pillarColumn = new MVCxGridViewColumn("Pillar", "OSP");
            pillarColumn.PropertiesEdit.EncodeHtml = false;
            pillarColumn.GroupIndex = 0;
            pillarColumn.Settings.SortMode = ColumnSortMode.Custom;
            pillarColumn.SortOrder = ColumnSortOrder.Ascending;
            settings.Columns.Add(pillarColumn);
            settings.Columns.Add("PerformanceIndicator", "Performance Indicator");
            settings.Columns.Add("Unit");
            settings.Columns.Add("Weight");
            var kpiOrderColumn = new MVCxGridViewColumn("KpiOrder");
            kpiOrderColumn.SortAscending();
            kpiOrderColumn.Visible = false;
            settings.Columns.Add(kpiOrderColumn);
            settings.Columns.Add("PillarOrder").Visible = false;
            settings.HtmlDataCellPrepared = (sender, e) =>
                {
                    e.Cell.Attributes.Add("onclick", string.Format(
                        "OnCellClick('{0}', '{1}');", e.VisibleIndex, e.GetValue("Id")));                    
                };

            settings.Columns.AddBand(targetActualBand =>
            {
                targetActualBand.Caption = "Target / Actual";
                targetActualBand.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                targetActualBand.Columns.Add("TargetActualYearly", "Yearly");
                targetActualBand.Columns.Add("TargetActualMonthly", "Monthly");
                targetActualBand.Columns.Add("TargetActualYtd", "YTD");
            });

            settings.Columns.AddBand(indexBand =>
                {
                    indexBand.Caption = "Index";
                    indexBand.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                    indexBand.Columns.Add("IndexYearlyStr", "Yearly");
                    indexBand.Columns.Add("IndexMonthlyStr", "Monthly");
                    indexBand.Columns.Add("IndexYtdStr", "YTD");
                });

            settings.Columns.Add(column =>
                {
                    column.FieldName = "Score";
                    column.PropertiesEdit.DisplayFormatString = "0.00";
                    column.Visible = false;
                });

            settings.Columns.Add(column =>
            {
                column.FieldName = "ScoreStr";
                column.Caption = "Score";
                column.PropertiesEdit.DisplayFormatString = "0.00";
            });

            decimal totalScore = 0;
            decimal totalPercent = 0;
            settings.CustomSummaryCalculate = (sender, e) =>
                {
                    decimal percent = 0;
                    string summaryTag = (e.Item as ASPxSummaryItem).Tag;
                    string fieldName = summaryTag.Remove(summaryTag.Length - 2);
                    if (fieldName != "Score") return;
                    if (e.SummaryProcess == CustomSummaryProcess.Start)
                    {
                        totalScore = 0;
                    }

                    if (e.SummaryProcess == CustomSummaryProcess.Calculate)
                    {
                        totalScore += Convert.ToDecimal(e.GetValue(fieldName));
                    }

                    string tagIndex = summaryTag.Substring(summaryTag.Length - 1);
                    
                    if (e.SummaryProcess == CustomSummaryProcess.Finalize)
                    {
                        
                        if (totalScore > 0)
                        {
                            percent = (totalScore/100) * Convert.ToDecimal(e.GetValue("Weight"));
                        }
                        if (tagIndex == "1")
                        {
                            e.TotalValue = percent;
                            totalPercent += percent;
                        }
                        else
                        {
                            e.TotalValue = totalPercent;
                        }
                          
                    }
                };

            settings.Settings.ShowGroupFooter = GridViewGroupFooterMode.VisibleAlways;

            ASPxSummaryItem kpiScore = new ASPxSummaryItem();
            kpiScore.ShowInGroupFooterColumn = "PerformanceIndicator";
            kpiScore.SummaryType = SummaryItemType.Sum;
            kpiScore.FieldName = "Score";
            kpiScore.DisplayFormat = "Score KPI in this pillar (0.00)";
            settings.GroupSummary.Add(kpiScore);

            ASPxSummaryItem percentageScore = new ASPxSummaryItem();
            percentageScore.ShowInGroupFooterColumn = "Score";
            percentageScore.Tag = "Score_1";
            percentageScore.FieldName = "Score";
            percentageScore.DisplayFormat = "0.00";
            percentageScore.SummaryType = SummaryItemType.Custom;
            settings.GroupSummary.Add(percentageScore);

            ASPxSummaryItem totalScoreLabel = new ASPxSummaryItem();
            totalScoreLabel.FieldName = "PerformanceIndicator";
            totalScoreLabel.ShowInGroupFooterColumn = "PerformanceIndicator";
            totalScoreLabel.DisplayFormat = "Total Score";
            totalScoreLabel.SummaryType = SummaryItemType.Count;

            ASPxSummaryItem totalScoreValue = new ASPxSummaryItem();
            totalScoreValue.Tag = "Score_2";
            totalScoreValue.FieldName = "ScoreStr";
            totalScoreValue.ShowInGroupFooterColumn = "ScoreStr";
            totalScoreValue.DisplayFormat = "0.00";
            totalScoreValue.SummaryType = SummaryItemType.Custom;

            //totalScoreValue.FieldName = settings.GroupSummary["Total"];
            settings.TotalSummary.Add(totalScoreValue);
            settings.TotalSummary.Add(totalScoreLabel);

            /*settings.SettingsPager.Position = PagerPosition.Bottom;
            settings.SettingsPager.FirstPageButton.Visible = true;
            settings.SettingsPager.LastPageButton.Visible = true;
            settings.SettingsPager.PageSizeItemSettings.Visible = true;*/
            /*settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "1", "2", "5" };*/
            settings.CustomColumnGroup = (sender, e) =>
                {
                    if (e.Column.FieldName != "Pillar") return;

                    var sortOrder1 = int.Parse(e.GetRow1Value("PillarOrder").ToString());
                    var sortOrder2 = int.Parse(e.GetRow2Value("PillarOrder").ToString());

                    e.Result = sortOrder1.CompareTo(sortOrder2);
                    e.Handled = true;
                };

            settings.CustomColumnSort = settings.CustomColumnGroup;
            settings.PreRender = (s, e) =>
                {
                    MVCxGridView gridView = s as MVCxGridView;
                    if (gridView != null)
                        gridView.ExpandAll();
                };
        }).Bind(Model).GetHtml()


