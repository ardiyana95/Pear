@using DevExpress.Data
@model IList<DSLNG.PEAR.Web.ViewModels.PmsSummary.PmsSummaryViewModel>

@Html.DevExpress().GridView(settings =>
        {
            settings.Name = "gridPmsSummaryIndex";
            settings.CallbackRouteValues = new { Controller = "PmsSummary", Action = "IndexGridPartial" };
            settings.SettingsBehavior.AllowFixedGroups = true;

            var ospColumn = new MVCxGridViewColumn("Osp", "OSP");
            ospColumn.PropertiesEdit.EncodeHtml = false;
            ospColumn.GroupIndex = 0;
            settings.Columns.Add(ospColumn);
            settings.Columns.Add("PerformanceIndicator", "Performance Indicator");
            settings.Columns.Add("Unit");
            settings.Columns.Add("Weight");
            settings.Columns.AddBand(targetBand =>
                {
                    targetBand.Caption = "Target";
                    targetBand.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                    targetBand.Columns.Add("TargetYearly", "Yearly");
                    targetBand.Columns.Add("TargetMonthly", "Monthly");
                    targetBand.Columns.Add("TargetYtd", "YTD");
                });

            settings.Columns.AddBand(actualBand =>
                {
                    actualBand.Caption = "Actual";
                    actualBand.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                    actualBand.Columns.Add("ActualYearly", "Yearly");
                    actualBand.Columns.Add("ActualMonthly", "Monthly");
                    actualBand.Columns.Add("ActualYtd", "YTD");
                });

            settings.Columns.AddBand(indexBand =>
                {
                    indexBand.Caption = "Index";
                    indexBand.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                    indexBand.Columns.Add("IndexYearly", "Yearly");
                    indexBand.Columns.Add("IndexMonthly", "Monthly");
                    indexBand.Columns.Add("IndexYtd", "YTD");
                });

            settings.Columns.Add(column =>
                {
                    column.FieldName = "Score";
                    column.PropertiesEdit.DisplayFormatString = "0.00";
                });
            
            //settings.Columns.Add("Score").PropertiesEdit.DisplayFormatString = "0.00";

            

            /*ASPxSummaryItem kpiScore = new ASPxSummaryItem();
            kpiScore.ShowInGroupFooterColumn = "PerformanceIndicator";
            kpiScore.SummaryType = SummaryItemType.Sum;
            kpiScore.FieldName = "Score";
            kpiScore.DisplayFormat = "Score KPI in this pillar (0.00)";

            ASPxSummaryItem percentageScore = new ASPxSummaryItem("PercentageScore", SummaryItemType.Custom);
            percentageScore.ShowInGroupFooterColumn = "Score";
            //percentageScore.SummaryType = SummaryItemType.Custom;
            //percentageScore.FieldName = "Score";
            percentageScore.DisplayFormat = "as (0.00)";*/
            
            
            settings.Settings.ShowGroupFooter = GridViewGroupFooterMode.VisibleAlways;


            ASPxSummaryItem kpiScore = new ASPxSummaryItem();
            kpiScore.ShowInGroupFooterColumn = "PerformanceIndicator";
            kpiScore.SummaryType = SummaryItemType.Sum;
            kpiScore.FieldName = "Score";
            kpiScore.DisplayFormat = "Score KPI in this pillar (0.00)";
            settings.GroupSummary.Add(kpiScore);
            
            ASPxSummaryItem percentageScore = new ASPxSummaryItem();
            percentageScore.ShowInGroupFooterColumn = "Score";
            percentageScore.DisplayFormat = "aa (0)";
            percentageScore.SummaryType = SummaryItemType.Custom;
            settings.GroupSummary.Add(percentageScore);
            settings.CustomSummaryCalculate = (sender, e) =>
                {
                    e.TotalValue = 999;
                };

            settings.CustomUnboundColumnData = (sender, e) =>
            {
                if (e.Column.FieldName == "Total")
                {
                    decimal price = (decimal)e.GetListSourceFieldValue("UnitPrice");
                    int quantity = Convert.ToInt32(e.GetListSourceFieldValue("Quantity"));
                    e.Value = price * quantity;
                }
            };
            
            //settings.GroupSummary.Add(percentageScore);
            
            settings.PreRender = (s, e) =>
            {
                MVCxGridView gridView = s as MVCxGridView;
                if (gridView != null)
                    gridView.ExpandAll();
            };
        }).Bind(Model).GetHtml()
